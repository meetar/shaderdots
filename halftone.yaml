styles:
    # cyan and magenta only, scales with zoom
    cm_halftone:
        shaders:
            uniforms:
                dot_frequency: 1000000
                dot_scale: 2.5
                true_color: false
                center: [0,0]
                

            blocks:
                global: |

                    // Antialiasing
                    float aastep(float threshold, const float freq, float value) {
                        const float scale = 2.;
                        const float y_rot = 0.;
                        float afwidth = freq * (1.0/200.0) / scale / cos(y_rot);
                        return smoothstep(threshold-afwidth, threshold+afwidth, value);
                    }

                filter: |
                    // Distance to nearest point in a grid of
                    // (frequency x frequency) points over the unit square
                    // Scale dot size for a subset of zoom
                    const float max_scale_zoom = 20.;
                    const float min_scale_zoom = 0.;
                    float scale_zoom_factor = 10.;
                    float zoom_frequency = dot_frequency / u_device_pixel_ratio;
                    zoom_frequency /= pow(2., u_map_position.z);

                    float meter_pixels = u_meters_per_pixel / u_device_pixel_ratio;

                    // Sample based on screenspace
                    const float pixel_scale = 695.; // arbitrary pixel_scale based on playing w/values
                    //vec2 st = (gl_FragCoord.xy - u_resolution*.5) / pixel_scale;
                    vec2 st = (gl_FragCoord.xy - vec2(center.x * 2., u_resolution.y - center.y * 2.)) / pixel_scale;

                    // Peg to map center so dots on ground plane stay in place as we move
                    const float dot_wrap = 1000.;
                    //st += mod(u_map_position.xy / meter_pixels, dot_wrap) / pixel_scale;

                    // Distance to nearest point in a grid of
                    // (frequency x frequency) points over the unit square
                    vec2 Cst = zoom_frequency*mat2(0.966, -0.259, 0.259, 0.966)*st;
                    vec2 Cuv = dot_scale*fract(Cst)-(dot_scale/2.);
                    float c = aastep(0.0, zoom_frequency, sqrt(color.x + color.y)-length(Cuv));
                    vec2 Mst = zoom_frequency*mat2(0.966, 0.259, -0.259, 0.966)*st;
                    vec2 Muv = dot_scale*fract(Mst)-(dot_scale/2.);
                    float m = aastep(0.0, zoom_frequency, sqrt(color.y + color.z)-length(Muv));

                    color.rgb = 1.0 - vec3(c,m,0.);

    cm_halftone_polygons:
        base: polygons
        mix: cm_halftone
